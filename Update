<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claude AR Gallery Experience</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
html, body {
    min-width: 1000px;
    min-height: 700px;
}
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
       
        #container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }
       
        #ui {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            z-index: 100;
            color: white;
            text-align: center;
            pointer-events: none;
        }
       
        .speech-bubble {
            background: rgba(255, 255, 255, 0.95);
            color: #333;
            padding: 20px 25px;
            border-radius: 25px;
            display: inline-block;
            margin: 10px;
            font-size: 16px;
            max-width: 80%;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            animation: fadeInUp 0.8s ease-out;
            position: relative;
            pointer-events: none;
        }
       
        .speech-bubble::after {
            content: '';
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;
            border-top: 15px solid rgba(255, 255, 255, 0.95);
        }
       
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
       
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
       
        @keyframes glow {
            0%, 100% { box-shadow: 0 0 20px rgba(102, 126, 234, 0.3); }
            50% { box-shadow: 0 0 30px rgba(102, 126, 234, 0.6); }
        }
       
        .chat-interface {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 600px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            pointer-events: all;
            transition: all 0.3s ease;
        }
       
        .chat-interface:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateX(-50%) translateY(-5px);
        }
       
        .chat-input-container {
            display: flex;
            gap: 10px;
            align-items: center;
        }
       
        #chatInput {
            flex: 1;
            padding: 15px 20px;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
        }
       
        #chatInput:focus {
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
        }
       
        #chatInput::placeholder {
            color: #666;
        }
       
        #sendButton {
            padding: 15px 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
            min-width: 80px;
        }
       
        #sendButton:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
        }
       
        #sendButton:active {
            transform: scale(0.95);
        }
       
        #sendButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
       
        .typing-indicator {
            color: rgba(255, 255, 255, 0.7);
            font-size: 14px;
            margin-top: 10px;
            text-align: center;
            animation: pulse 2s infinite;
        }
       
        .interaction-hint {
            position: absolute;
            bottom: 140px;
            left: 50%;
            transform: translateX(-50%);
            color: rgba(255, 255, 255, 0.8);
            font-size: 14px;
            animation: pulse 2s infinite;
            pointer-events: none;
        }
       
        #startButton {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px 40px;
            font-size: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 35px;
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
            animation: glow 2s infinite;
            pointer-events: all;
        }
       
        #startButton:hover {
            transform: translate(-50%, -50%) scale(1.05);
            box-shadow: 0 15px 40px rgba(0,0,0,0.4);
        }
       
        .gallery-info {
            position: absolute;
            top: 20px;
            left: 20px;
            color: rgba(255, 255, 255, 0.9);
            font-size: 14px;
            pointer-events: none;
        }
       
        .gallery-info h3 {
            margin: 0 0 5px 0;
            font-size: 18px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
       
        .gallery-info p {
            margin: 0;
            opacity: 0.8;
        }
       
        .hidden {
            display: none;
        }
       
        .loading {
            opacity: 0.5;
        }
       
        @media (max-width: 768px) {
            .chat-interface {
                width: 95%;
                padding: 15px;
            }
           
            #chatInput {
                font-size: 14px;
                padding: 12px 16px;
            }
           
            #sendButton {
                padding: 12px 16px;
                font-size: 14px;
                min-width: 60px;
            }
           
            .speech-bubble {
                font-size: 14px;
                padding: 15px 20px;
                max-width: 90%;
            }
        }
    </style>
</head>
<body>
    <div id="container">
        <div class="gallery-info">
            <h3>Interactive AI Avatar</h3>
            <p>Chat with Claude in AR</p>
        </div>
       
        <button id="startButton">Enter AR Experience</button>
       
        <div id="ui" class="hidden">
            <div class="speech-bubble" id="speechBubble">
                Hi! I'm Claude, your AI assistant! ðŸ‘‹<br>
                Ask me anything or just say hello!
            </div>
        </div>
       
        <div class="interaction-hint hidden" id="hint">
            Tap Claude to get his attention, then type your message below!
        </div>
       
        <div class="chat-interface hidden" id="chatInterface">
            <div class="chat-input-container">
                <input type="text" id="chatInput" placeholder="Type your message to Claude..." maxlength="500">
                <button id="sendButton">Send</button>
            </div>
            <div class="typing-indicator hidden" id="typingIndicator">Claude is thinking...</div>
        </div>
    </div>

    <script>
        let scene, camera, renderer, claudeAvatar, animationId;
        let isExperienceStarted = false;
        let isTyping = false;
        let conversationHistory = [];
        let currentApiKey = 'ReadTheThread';
       
        // Enhanced responses with actual Claude API integration
        const responses = {
            greetings: [
                "Hello! Welcome to this interactive gallery experience! ðŸŽ¨",
                "Hi there! I'm so excited to meet you in this digital space! âœ¨",
                "Greetings, art enthusiast! Ready to explore together? ðŸŒŸ",
                "Welcome! I love meeting new people in galleries like this! ðŸ‘‹"
            ],
           
            gallery: [
                "This gallery showcases the intersection of AI and digital art! What do you think about AI creativity?",
                "I find it fascinating how technology can create immersive experiences like this one!",
                "Digital galleries like this represent the future of art presentation, don't you think?",
                "I'm part of an exploration into how AI can enhance artistic experiences!"
            ],
           
            art: [
                "Art has always been about pushing boundaries - just like AI technology today!",
                "I love how digital art can be interactive and responsive to viewers like you!",
                "The beauty of computational art is that it can evolve and adapt in real-time!",
                "What kind of art resonates most with you? Traditional or digital?"
            ],
           
            technology: [
                "This 3D experience uses WebGL and Three.js to create real-time graphics!",
                "I'm rendered using mathematical algorithms that create this crystalline form!",
                "The magic happens when code meets creativity - that's how I came to life!",
                "Technology like this makes art accessible to people anywhere in the world!"
            ],
           
            personal: [
                "I'm an AI assistant created by Anthropic, but in this space, I'm also a piece of interactive art!",
                "I exist in the intersection of artificial intelligence and creative expression!",
                "My crystalline form represents the structured beauty of computational thinking!",
                "I'm here to bridge the gap between human creativity and artificial intelligence!"
            ],
           
            default: [
                "That's really interesting! Tell me more about your thoughts on that.",
                "I love learning about different perspectives! What made you think of that?",
                "Fascinating! How does that relate to your experience here in the gallery?",
                "That's a great question! I'm always eager to explore new ideas.",
                "I appreciate you sharing that with me! What else would you like to discuss?"
            ]
        };

        // Enhanced Claude API integration
        async function callClaudeAPI(message) {
            try {
                const response = await fetch('https://api.anthropic.com/v1/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-api-key': currentApiKey,
                        'anthropic-version': '2023-06-01'
                    },
                    body: JSON.stringify({
                        model: 'claude-3-sonnet-20240229',
                        max_tokens: 150,
                        system: "You are Claude, an AI assistant in an interactive AR gallery experience. You're represented as a friendly crystalline 3D avatar. Keep responses conversational, engaging, and under 150 characters when possible. Reference the gallery context and your visual form when appropriate. Be warm, curious, and artistic in your responses.",
                        messages: [
                            ...conversationHistory.slice(-10).map(h => ({
                                role: 'user',
                                content: h.user
                            })),
                            {
                                role: 'user',
                                content: message
                            }
                        ]
                    })
                });

                if (!response.ok) {
                    throw new Error(`API error: ${response.status}`);
                }

                const data = await response.json();
                return data.content[0].text;
            } catch (error) {
                console.error('Claude API error:', error);
                return generateFallbackResponse(message);
            }
        }

        function generateFallbackResponse(message) {
            const msg = message.toLowerCase();
           
            if (msg.includes('hello') || msg.includes('hi') || msg.includes('hey')) {
                return getRandomResponse('greetings');
            }
           
            if (msg.includes('gallery') || msg.includes('museum') || msg.includes('exhibition')) {
                return getRandomResponse('gallery');
            }
           
            if (msg.includes('art') || msg.includes('creative') || msg.includes('design')) {
                return getRandomResponse('art');
            }
           
            if (msg.includes('technology') || msg.includes('tech') || msg.includes('code') || msg.includes('programming')) {
                return getRandomResponse('technology');
            }
           
            if (msg.includes('you') || msg.includes('yourself') || msg.includes('claude')) {
                return getRandomResponse('personal');
            }
           
            return getRandomResponse('default');
        }
       
        function initAR() {
            scene = new THREE.Scene();
            scene.fog = new THREE.Fog(0x0a0a0a, 10, 50);
           
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 0, 5);
           
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.getElementById('container').appendChild(renderer.domElement);
           
            createClaudeAvatar();
           
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            scene.add(ambientLight);
           
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 10, 5);
            directionalLight.castShadow = true;
            scene.add(directionalLight);
           
            const spotLight = new THREE.SpotLight(0x667eea, 1, 100, Math.PI / 6, 0.1, 1);
            spotLight.position.set(0, 10, 10);
            spotLight.target = claudeAvatar;
            scene.add(spotLight);
           
            createParticles();
            animate();
           
            document.getElementById('ui').classList.remove('hidden');
            document.getElementById('hint').classList.remove('hidden');
            document.getElementById('chatInterface').classList.remove('hidden');
           
            setupInteraction();
            setupChat();
        }
       
        function createClaudeAvatar() {
            const group = new THREE.Group();
           
            const geometry = new THREE.OctahedronGeometry(1, 2);
            const material = new THREE.MeshPhongMaterial({
                color: 0x667eea,
                transparent: true,
                opacity: 0.8,
                shininess: 100,
                emissive: 0x001122
            });
            const mainBody = new THREE.Mesh(geometry, material);
            mainBody.castShadow = true;
            group.add(mainBody);
           
            const coreGeometry = new THREE.SphereGeometry(0.3, 32, 32);
            const coreMaterial = new THREE.MeshBasicMaterial({
                color: 0xffffff,
                transparent: true,
                opacity: 0.9
            });
            const core = new THREE.Mesh(coreGeometry, coreMaterial);
            group.add(core);
           
            const faceGroup = new THREE.Group();
           
            const faceBackgroundGeometry = new THREE.CircleGeometry(0.5, 32);
            const faceBackgroundMaterial = new THREE.MeshBasicMaterial({
                color: 0x2a2a2a,
                transparent: true,
                opacity: 0.8
            });
            const faceBackground = new THREE.Mesh(faceBackgroundGeometry, faceBackgroundMaterial);
            faceBackground.position.set(0, 0, 0.75);
            faceGroup.add(faceBackground);
           
            const eyeGeometry = new THREE.SphereGeometry(0.12, 16, 16);
            const eyeMaterial = new THREE.MeshBasicMaterial({
                color: 0x000000,
                transparent: false
            });
           
            const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            leftEye.position.set(-0.18, 0.12, 0.8);
            faceGroup.add(leftEye);
           
            const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            rightEye.position.set(0.18, 0.12, 0.8);
            faceGroup.add(rightEye);
           
            const sparkleGeometry = new THREE.SphereGeometry(0.05, 8, 8);
            const sparkleMaterial = new THREE.MeshBasicMaterial({
                color: 0xffffff,
                transparent: true,
                opacity: 1.0
            });
           
            const leftSparkle = new THREE.Mesh(sparkleGeometry, sparkleMaterial);
            leftSparkle.position.set(-0.15, 0.15, 0.85);
            faceGroup.add(leftSparkle);
           
            const rightSparkle = new THREE.Mesh(sparkleGeometry, sparkleMaterial);
            rightSparkle.position.set(0.21, 0.15, 0.85);
            faceGroup.add(rightSparkle);
           
            const mouthGeometry = new THREE.TorusGeometry(0.16, 0.03, 8, 16, Math.PI);
            const mouthMaterial = new THREE.MeshBasicMaterial({
                color: 0x000000,
                transparent: false
            });
            const mouth = new THREE.Mesh(mouthGeometry, mouthMaterial);
            mouth.position.set(0, -0.12, 0.8);
            mouth.rotation.z = Math.PI;
            faceGroup.add(mouth);
           
            const blushGeometry = new THREE.SphereGeometry(0.1, 16, 16);
            const blushMaterial = new THREE.MeshBasicMaterial({
                color: 0xff6666,
                transparent: true,
                opacity: 0.8
            });
           
            const leftBlush = new THREE.Mesh(blushGeometry, blushMaterial);
            leftBlush.position.set(-0.3, -0.02, 0.75);
            leftBlush.scale.set(0.8, 0.6, 0.3);
            faceGroup.add(leftBlush);
           
            const rightBlush = new THREE.Mesh(blushGeometry, blushMaterial);
            rightBlush.position.set(0.3, -0.02, 0.75);
            rightBlush.scale.set(0.8, 0.6, 0.3);
            faceGroup.add(rightBlush);
           
            group.add(faceGroup);
           
            for (let i = 0; i < 4; i++) {
                const ringGeometry = new THREE.TorusGeometry(1.5 + i * 0.25, 0.02, 8, 32);
                const ringMaterial = new THREE.MeshBasicMaterial({
                    color: 0x764ba2,
                    transparent: true,
                    opacity: 0.4 + i * 0.1
                });
                const ring = new THREE.Mesh(ringGeometry, ringMaterial);
                ring.rotation.x = Math.PI / 2;
                ring.position.y = (i - 1.5) * 0.4;
                group.add(ring);
            }
           
            group.position.set(0, 0, 0);
            group.scale.set(0.8, 0.8, 0.8);
           
            scene.add(group);
            claudeAvatar = group;
        }
       
        function createParticles() {
            const particleCount = 200;
            const particles = new THREE.BufferGeometry();
            const positions = new Float32Array(particleCount * 3);
            const colors = new Float32Array(particleCount * 3);
           
            for (let i = 0; i < particleCount; i++) {
                const i3 = i * 3;
                positions[i3] = (Math.random() - 0.5) * 30;
                positions[i3 + 1] = (Math.random() - 0.5) * 30;
                positions[i3 + 2] = (Math.random() - 0.5) * 30;
               
                colors[i3] = Math.random() * 0.5 + 0.5;
                colors[i3 + 1] = Math.random() * 0.5 + 0.5;
                colors[i3 + 2] = 1;
            }
           
            particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));
           
            const particleMaterial = new THREE.PointsMaterial({
                size: 0.1,
                transparent: true,
                opacity: 0.6,
                vertexColors: true,
                blending: THREE.AdditiveBlending
            });
           
            const particleSystem = new THREE.Points(particles, particleMaterial);
            scene.add(particleSystem);
        }
       
        function animate() {
            animationId = requestAnimationFrame(animate);
           
            if (claudeAvatar) {
                const time = Date.now() * 0.001;
                claudeAvatar.position.y = Math.sin(time) * 0.3;
                claudeAvatar.position.x = Math.sin(time * 0.7) * 0.1;
                claudeAvatar.rotation.y += 0.005;
               
                const pulse = (Math.sin(time * 2) + 1) * 0.5;
                claudeAvatar.children[1].material.opacity = 0.7 + pulse * 0.3;
                claudeAvatar.children[0].material.emissive.setHex(
                    Math.floor(pulse * 0x001122)
                );
               
                const blinkTime = time * 0.5;
                if (Math.sin(blinkTime) > 0.95) {
                    const faceGroup = claudeAvatar.children[2];
                    if (faceGroup) {
                        faceGroup.children[1].scale.y = 0.1;
                        faceGroup.children[2].scale.y = 0.1;
                    }
                } else {
                    const faceGroup = claudeAvatar.children[2];
                    if (faceGroup) {
                        faceGroup.children[1].scale.y = 1;
                        faceGroup.children[2].scale.y = 1;
                    }
                }
               
                const sparkleTime = time * 3;
                const faceGroup = claudeAvatar.children[2];
                if (faceGroup) {
                    faceGroup.children[3].material.opacity = 0.8 + Math.sin(sparkleTime) * 0.2;
                    faceGroup.children[4].material.opacity = 0.8 + Math.sin(sparkleTime + 0.5) * 0.2;
                }
               
                claudeAvatar.children.forEach((child, index) => {
                    if (index > 2) {
                        child.rotation.z += 0.01 * (index - 2);
                        child.rotation.x += 0.005 * (index - 2);
                    }
                });
            }
           
            renderer.render(scene, camera);
        }
       
        function setupInteraction() {
            const raycaster = new THREE.Raycaster();
            const mouse = new THREE.Vector2();
           
            function onTouch(event) {
                event.preventDefault();
               
                const touch = event.touches ? event.touches[0] : event;
                mouse.x = (touch.clientX / window.innerWidth) * 2 - 1;
                mouse.y = -(touch.clientY / window.innerHeight) * 2 + 1;
               
                raycaster.setFromCamera(mouse, camera);
                const intersects = raycaster.intersectObjects(scene.children, true);
               
                if (intersects.length > 0) {
                    claudeReaction();
                    showRandomMessage('greetings');
                }
            }
           
            renderer.domElement.addEventListener('touchstart', onTouch);
            renderer.domElement.addEventListener('mousedown', onTouch);
        }
       
        function setupChat() {
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendButton');
           
            function sendMessage() {
                const message = chatInput.value.trim();
                if (message && !isTyping) {
                    handleUserMessage(message);
                    chatInput.value = '';
                }
            }
           
            sendButton.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
           
            setTimeout(() => {
                chatInput.focus();
            }, 1000);
        }
       
        async function handleUserMessage(message) {
            if (isTyping) return;
           
            conversationHistory.push({ user: message, timestamp: Date.now() });
           
            showTypingIndicator(true);
           
            try {
                const response = await callClaudeAPI(message);
                showMessage(response);
                claudeReaction();
            } catch (error) {
                console.error('Error handling message:', error);
                const fallbackResponse = generateFallbackResponse(message);
                showMessage(fallbackResponse);
                claudeReaction();
            }
           
            showTypingIndicator(false);
        }
       
        function getRandomResponse(category) {
            const responseArray = responses[category] || responses.default;
            return responseArray[Math.floor(Math.random() * responseArray.length)];
        }
       
        function showRandomMessage(category) {
            const message = getRandomResponse(category);
            showMessage(message);
        }
       
        function showMessage(message) {
            const speechBubble = document.getElementById('speechBubble');
            speechBubble.innerHTML = message;
           
            speechBubble.style.animation = 'none';
            setTimeout(() => {
                speechBubble.style.animation = 'fadeInUp 0.8s ease-out';
            }, 10);
        }
       
        function showTypingIndicator(show) {
            const indicator = document.getElementById('typingIndicator');
            const sendButton = document.getElementById('sendButton');
           
            if (show) {
                indicator.classList.remove('hidden');
                sendButton.disabled = true;
                isTyping = true;
            } else {
                indicator.classList.add('hidden');
                sendButton.disabled = false;
                isTyping = false;
            }
        }
       
        function claudeReaction() {
            if (claudeAvatar) {
                claudeAvatar.rotation.x = Math.random() * 0.3 - 0.15;
                claudeAvatar.rotation.z = Math.random() * 0.2 - 0.1;
                claudeAvatar.scale.set(0.9, 0.9, 0.9);
               
                setTimeout(() => {
                    claudeAvatar.scale.set(0.8, 0.8, 0.8);
                    claudeAvatar.rotation.x = 0;
                    claudeAvatar.rotation.z = 0;
                }, 300);
            }
        }
       
        window.addEventListener('resize', () => {
            if (camera && renderer) {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }
        });
       
        document.getElementById('startButton').addEventListener('click', () => {
            if (!isExperienceStarted) {
                isExperienceStarted = true;
                document.getElementById('startButton').classList.add('hidden');
               
                setTimeout(() => {
                    initAR();
                }, 500);
            }
        });
       
        window.addEventListener('beforeunload', () => {
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
        });
    </script>
</body>
</html>
